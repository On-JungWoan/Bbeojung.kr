## model ##
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE","config.settings")

class Bus_stop(models.Model):
    ARS_ID = models.FloatField(primary_key=True)
    lon = models.FloatField(blank=True, null=True)  # 경도
    lat = models.FloatField(blank=True, null=True)  # 위도
    dong_name = models.CharField(max_length=200,blank=True, null=True)
    population = models.FloatField(blank=True, null=True)

class WeatherDB(models.Model):
    ARS_ID = models.FloatField(primary_key=True)
    lon = models.FloatField(blank=True, null=True)  # 경도
    lat = models.FloatField(blank=True, null=True)
    Date = models.CharField(max_length=20,blank=True, null=True)
    OneTime = models.CharField(max_length=20,null=True,blank=True)
    temp = models.FloatField(blank=True, null=True)#온도
    humidity = models.FloatField(blank=True, null=True)#습도
    rainType = models.CharField(max_length=20, blank=True, null=True)#강수형대
    rain = models.FloatField(blank=True, null=True)#한시간 동안 강수량
    sky = models.FloatField(blank=True, null=True)#하늘상태
    windspeed = models.FloatField(blank=True, null=True)#풍속

class ride_id_congestion(models.Model):
    id = models.AutoField(primary_key=True)
    ride_id = models.CharField(max_length=200,blank=True, null=True)
    congestion = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_id

class ride_route_congestion(models.Model):
    id = models.AutoField(primary_key=True)
    ride_route = models.CharField(max_length=200,blank=True, null=True)
    route_congestion = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_route

class ride_weekday_congestion(models.Model):
    id = models.AutoField(primary_key=True)
    ride_weekday = models.FloatField(blank=True, null=True)
    weekday_congestion = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_weekday

class ride_id_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_id = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_id

class ride_id_weekday_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_id_weekday = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_id_weekday

class ride_route_id_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_route_id = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_route_id

class ride_route_id_weekday_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_route_id_weekday = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_route_id_weekday

class ride_route_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_route = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_route

class ride_route_weekday_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    route_weekday = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.route_weekday

class ride_weekday_mean_sum(models.Model):
    id = models.AutoField(primary_key=True)
    ride_weekday = models.CharField(max_length=200,blank=True, null=True)
    mean = models.FloatField(blank=True, null=True)
    sum = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.ride_weekday

class id_distance(models.Model):
    id = models.AutoField(primary_key=True)
    distance_id = models.CharField(max_length=200,blank=True, null=True)
    dis_5159 = models.FloatField(blank=True, null=True)
    dis_5745 = models.FloatField(blank=True, null=True)
    dis_5445 = models.FloatField(blank=True, null=True)
    dis_4475 = models.FloatField(blank=True, null=True)
    dis_4406 = models.FloatField(blank=True, null=True)
    dis_2002 = models.FloatField(blank=True, null=True)
    dis_2232 = models.FloatField(blank=True, null=True)
    dis_1130 = models.FloatField(blank=True, null=True)
    dis_3236 = models.FloatField(blank=True, null=True)
    def __str__(self):
        return self.distance_id


## view 함수 ##

    id=models.Bus_stop.objects.get(ARS_ID = ars_id)
    weather = models.WeatherDB.objects.get(ARS_ID = ars_id)
    distance = models.id_distance.objects.get(distance_id=ars_id)
    ride_id_weekday=ars_id + "_" + weekday[datetime.today().weekday()]
    ride_route_id= route + "_" + id
    ride_route_id_weekday=route+"_"+ars_id + "_" + weekday[datetime.today().weekday()]
    route_weekday=route+"_"+weekday[datetime.today().weekday()]
    predict_model=joblib.load('C:/Users/hp/Desktop/JJOproject/bus_model_final.pkl')


    dis_5159=distance.dis_5159
    dis_5745=distance.dis_5745
    dis_5445=distance.dis_5445
    dis_4475=distance.dis_4475
    dis_4406=distance.dis_4406
    dis_2002=distance.dis_2002
    dis_2232=distance.dis_2232
    dis_1130=distance.dis_1130
    dis_3236=distance.dis_3236
    population = id.population
    ride_ri_mean=models.ride_route_id_mean_sum.objects.get(ride_route_id = ride_route_id).mean
    ride_ri_sum=models.ride_route_id_mean_sum.objects.get(ride_route_id = ride_route_id).sum
    ride_r_mean=models.ride_route_mean_sum.objects.get(ride_route = route).mean
    ride_r_sum=models.ride_route_mean_sum.objects.get(ride_route = route).sum
    ride_i_mean=models.ride_id_mean_sum.objects.get(ride_id = ars_id).mean
    ride_i_sum=models.ride_id_mean_sum.objects.get(ride_id = ars_id).sum
    ride_w_mean=models.ride_weekday_mean_sum.objects.get(ride_weekday = weekday).mean
    ride_w_sum=models.ride_weekday_mean_sum.objects.get(ride_weekday = weekday).sum
    ride_rw_mean=models.ride_route_weekday_mean_sum.objects.get(route_weekday = route_weekday).mean
    ride_rw_sum=models.ride_route_weekday_mean_sum.objects.get(route_weekday = route_weekday).sum
    ride_iw_mean=models.ride_id_weekday_mean_sum.objects.get(ride_id_weekday = ride_id_weekday).mean
    ride_iw_sum=models.ride_id_weekday_mean_sum.objects.get(ride_id_weekday = ride_id_weekday).sum
    ride_riw_mean=models.ride_route_id_weekday_mean_sum.objects.get(ride_route_id_weekday = ride_route_id_weekday).mean
    ride_riw_sum=models.ride_route_id_weekday_mean_sum.objects.get(ride_route_id_weekday = ride_route_id_weekday).sum
    route_congestion=models.ride_route_congestion.objects.get(ride_route = route).route_congestion
    id_congestion=models.ride_id_congestion.objects.get(ride_id = ars_id).congestion
    weekday_congestion=models.ride_weekday_congestion.objects.get(ride_weekday = weekday).weekday_congestion

    input_var=pd.DataFrame([[dis_5159, dis_5745, dis_5445,
       dis_4475, dis_4406, dis_2002, dis_2232, dis_1130, dis_3236,
       population,ride_ri_mean,ride_ri_sum, ride_r_mean, ride_r_sum,
        ride_i_mean, ride_i_sum, ride_w_mean,
        ride_w_sum, ride_rw_mean, ride_rw_sum,
        ride_iw_mean, ride_iw_sum, ride_riw_mean,
        ride_riw_sum, route_congestion, id_congestion,
        weekday_congestion, weekend, weather.temp, weather.rain, weather.windspeed, weather.humidity,
        weekday[0], weekday[1], weekday[2], weekday[3], weekday[4],
        weekday[5], weekday[6], route_encode, id_encode,
        route_id_weekday_encode, route_id_encode]])
    predict_result=predict_model.predict(input_var)
    context = {'predict_result': predict_result, 'temp': weather.temp, 'sky': weather.sky,
               'humidity': weather.humidity, 'rainType': weather.rainType}
    return render(request, 'pybo/question_detail.html', context)
# # # 날씨 api에서 받아오기

#
# def check_weather(nx, ny):
#
#     url = "http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtFcst"
#
#     serviceKey = "IkwYEWiPWior39UF5%2BeuNa8RFPbJwwib3HDmhR3FKgXKMDX%2F%2FEiXqpmWKPd4oW%2FN2EtbIxWTl2EvPWdI%2Fxgqfg%3D%3D"
#     serviceKeyDecoded = unquote(serviceKey, 'UTF-8')
#
#     now = datetime.now()
#     today = datetime.today().strftime("%Y%m%d")
#     y = date.today() - timedelta(days=1)
#     yesterday = y.strftime("%Y%m%d")
#
#     if now.minute < 45:  # base_time와 base_date 구하는 함수
#         if now.hour == 0:
#             base_time = "2330"
#             base_date = yesterday
#         else:
#             pre_hour = now.hour - 1
#             if pre_hour < 10:
#                 base_time = "0" + str(pre_hour) + "30"
#             else:
#                 base_time = str(pre_hour) + "30"
#             base_date = today
#     else:
#         if now.hour < 10:
#             base_time = "0" + str(now.hour) + "30"
#         else:
#             base_time = str(now.hour) + "30"
#         base_date = today
#
#     queryParams = '?' + urlencode({quote_plus('serviceKey'): serviceKeyDecoded, quote_plus('base_date'): base_date,
#                                     quote_plus('base_time'): base_time, quote_plus('nx'): nx, quote_plus('ny'): ny,
#                                     quote_plus('dataType'): 'json', quote_plus('numOfRows'): '60'})
#
#     # 값 요청 (웹 브라우저 서버에서 요청 - url주소와 )
#     res = requests.get(url + queryParams, verify=False)
#     items = res.json().get('response').get('body').get('items')
#     # print(items)
#     data = dict()
#     data['date'] = base_date
#
#     weather_data = dict()
#
#     for item in items['item']:
#         # 기온
#         if item['category'] == 'T1H':
#             weather_data['tmp'] = item['fcstValue']
#         # 습도
#         if item['category'] == 'REH':
#             weather_data['hum'] = item['fcstValue']
#         # 하늘상태: 맑음(1) 구름많은(3) 흐림(4)
#         if item['category'] == 'SKY':
#             weather_data['sky'] = item['fcstValue']
#         # 1시간 동안 강수량
#         if item['category'] == 'RN1':
#             weather_data['rain'] = item['fcstValue']
#
#     print("response: ", weather_data)
#     # print(weather_data['tmp'])
#     return weather_data
#
# def job():
#     print(f'******{time.strftime("%H:%M:%S")}******')
#
#     buildings = Bus_stop.objects.all()
#     for building in buildings:
#         nx, ny = mapToGrid(building.lat, building.lon)
#         data = check_weather(nx, ny)
#         weather, created = WeatherDB.objects.get_or_create(building=building)
#         weather.temp = data['tmp']
#         weather.humidity = data['hum']
#         weather.rainType = data['rain']
#         weather.sky = data['sky']
#         weather.save()
#
#     print("weatherDB saved")
#     print("************************")
#
# def cron_weather():
#     sched = BackgroundScheduler()
#     # 30분마다 실행
#     sched.add_job(job, 'interval', minutes=30, id='cron_weather')
#     sched.start()